using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using System.Text;
using System.Threading.Tasks;

namespace Emit
{
    public delegate void SetValueDelegate(object target, object arg);

    //Set commission code generated by running Emit
    public static class DynamicMethodFactory
    {    
        public static SetValueDelegate CreatePropertySetter(PropertyInfo property)
        {
            if (property == null)
                throw new ArgumentNullException("property");

            if (!property.CanWrite)
                return null;

            MethodInfo setMethod = property.GetSetMethod(true);

            DynamicMethod dm = new DynamicMethod("PropertySetter", null,
                new Type[] { typeof(object), typeof(object) }, property.DeclaringType, true);
           
            //Get an MSIL generator through the method builder
            ILGenerator il = dm.GetILGenerator();

            // Start writing method execution logic
            //
            if (!setMethod.IsStatic)
            {
                //Load the parameter at index 0 into the evaluation stack
                il.Emit(OpCodes.Ldarg_0);
            }
            il.Emit(OpCodes.Ldarg_1);
            //Non-static method parameter index starts from 1

            EmitCastToReference(il, property.PropertyType);
            if (!setMethod.IsStatic && !property.DeclaringType.IsValueType)
            {
                il.EmitCall(OpCodes.Callvirt, setMethod, null);
            }
            else
                il.EmitCall(OpCodes.Call, setMethod, null);
            // Exit function
            il.Emit(OpCodes.Ret);

            return (SetValueDelegate)dm.CreateDelegate(typeof(SetValueDelegate));
        }

        private static void EmitCastToReference(ILGenerator il, Type type)
        {
            if (type.IsValueType)
                il.Emit(OpCodes.Unbox_Any, type);
            else
                il.Emit(OpCodes.Castclass, type);
        }
    }
    public class OrderInfo 
    { 
        public OrderInfo() { }
        public int OrderID { get; set; }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion());

            int count = 1000000;
            OrderInfo testObj = new OrderInfo();
            PropertyInfo propInfo = typeof(OrderInfo).GetProperty("OrderID");

            Stopwatch watch1 = new Stopwatch();
            watch1.Start();
            for (int i = 0; i < count; i++)
            { testObj.OrderID = 123; }
            watch1.Stop();
            Console.WriteLine("Directly Invoke：       " + watch1.Elapsed.ToString());

            Stopwatch watch2 = Stopwatch.StartNew();
            watch2.Start();
            for (int i = 0; i < count; i++)
                propInfo.SetValue(testObj, 123, null);
            watch2.Stop();
            Console.WriteLine("reflection：　          " + watch2.Elapsed.ToString());



            SetValueDelegate setter2 = DynamicMethodFactory.CreatePropertySetter(propInfo);
            Stopwatch watch3 = new Stopwatch();
            watch3.Start();
            for (int i = 0; i < count; i++)
            { setter2(testObj, 123); }            
            watch3.Stop();
            Console.WriteLine("EmitSet Invoke：        " + watch3.Elapsed.ToString());

            
            Stopwatch watch4 = new Stopwatch();                       
            Type t = typeof(OrderInfo);
            PropertyInfo p1 = t.GetProperty("OrderID");
            var act = Delegate.CreateDelegate(typeof(Action<OrderInfo, int>), p1.GetSetMethod(true)) as Action<OrderInfo, int>;
            watch4.Start();
            for (int i = 0; i < count; i++)
            {
                act(testObj, 7);

            }
            watch4.Stop();
            Console.WriteLine("CreateDelegate invoke:  "+watch4.Elapsed );

            Stopwatch watch5 = new Stopwatch();
            dynamic order = new OrderInfo();
            watch5.Start();
            for (int i = 0; i < count; i++)
            {
                order.OrderID = 5;
            }
            watch5.Stop();
            Console.WriteLine("dynamic invoke:         " + watch5.Elapsed);
            Console.ReadKey();
        }
    }
}
